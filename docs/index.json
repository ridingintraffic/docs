[
{
	"uri": "https://ridingintraffic.github.io/docs/docs/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "hugo notes",
	"content": "   Links More links     shortcodes documentation     creating a new anything hugo new docs/hugo.md  "
},
{
	"uri": "https://ridingintraffic.github.io/docs/posts/my-first-post/",
	"title": "My First Post",
	"tags": [],
	"description": "",
	"content": "adding something here\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "footer\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " DOCS You have found the doc store of a whole bunch of things\u0026hellip;\nRead at our own peril this is mostly just my notes\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/",
	"title": "Docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/git/",
	"title": "Git",
	"tags": [],
	"description": "git notes",
	"content": " ## Git Revert ## Git checkout master #then run a git log and get the id of the merge commit. git log #then revert to that commit: git revert -m 1 \u0026lt;merge-commit\u0026gt; # With ‘-m 1’ we tell git to revert to the first parent of the mergecommit on the master branch. -m 2 would specify to revert to the first parent on the develop branch where the merge came from initially. Now commit the revert and push changes to the remote repo and you are done. Getting back the reverted changes This changes the data to look like before the merge, but not the history. So it’s not exactly like an undo. If we would merge develop into master again the changes we reverted in master wont be applied. So if we would like these changes back again we could revert our first revert(!). git revert \u0026lt;commit-of-first-revert\u0026gt;  # git rebase squash git rebase -i \u0026lt;commit hash\u0026gt;; where the commit hash is the one before yours the reword all of hte commits except for your latest one, the latest one you pick then check the git log to make sure that you only have one commit git push --force # which will force your local into the branch you are working on and hopefully everything will get squashed  Branches $ git branch \u0026lt;branchname\u0026gt; # creating a branch $ git branch -d \u0026lt;branchname\u0026gt; # deleting a branch $ git branch -av # displaying branch info $ git branch --merged # to look at the merged branches $ git branch --no-merged # unmerged branches  Git Log $ git log --stat --pretty=oneline master...your-branch # look at the changed between branches $ git log --left-right --graph --cherry-pick --oneline master...your_branch # look at the changed between branches with more colors $ git log --follow -p \u0026lt;filename/path\u0026gt; #view the log of a single file  Git Resets $ git log .... commit 766f988169 commit 82f5ea34 git reset --hard 766; # will reset directly to that old version throwing away everything in between  Git Diff $ git diff # Find out what changes you’ve made since the last commit with: $ git diff \u0026quot;@{yesterday}\u0026quot; # Or since yesterday: $ git diff 1b6d \u0026quot;master~2\u0026quot; # Or between a particular version and 2 versions ago: $ git whatchanged --since=\u0026quot;2 weeks ago\u0026quot;  I did something terribly wrong, please tell me git has a magic time machine!?! git reflog # you will see a list of every thing you've done in git, across all branches! # each one has an index HEAD@{index} # find the one before you broke everything git reset HEAD@{index} # magic time machine  You can use this to get back stuff you accidentally deleted, or just to remove some stuff you tried that broke the repo, or to recover after a bad merge, or just to go back to a time when things actually worked. I use reflog A LOT. Mega hat tip to the many many many many many people who suggested adding it!\nI committed and immediately realized I need to make one small change! # make your change git add . # or add individual files git commit --amend # follow prompts to change or keep the commit message # now your last commit contains that change!  This usually happens to me if I commit, then run tests/linters\u0026hellip; and FML, I didn\u0026rsquo;t put a space after the equals sign. You could also make the change as a new commit and then do rebase -i in order to squash them both together, but this is about a million times faster. Oh shit, I need to change the message on my last commit!\ngit commit --amend # follow prompts to change the commit message Stupid commit message formatting requirements.  I accidentally committed something to master that should have been on a brand new branch! # create a new branch from the current state of master git branch some-new-branch-name # remove the commit from the master branch git reset HEAD~ --hard git checkout some-new-branch-name # your commit lives in this branch now :)  Note: this doesn\u0026rsquo;t work if you\u0026rsquo;ve already pushed to origin, and if you tried other things first, you might need to git reset HEAD@{number} instead of HEAD~. Infinite sadness. Also, many many many people suggested an awesome way to make this shorter that I didn\u0026rsquo;t know myself. Thank you all!\nI accidentally committed to the wrong branch! # undo the last commit, but leave the changes available git reset HEAD~ --soft git stash # move to the correct branch git checkout name-of-the-correct-branch git stash pop git add . # or add individual files git commit -m \u0026quot;your message here\u0026quot; # now your changes are on the correct branch  A lot of people have suggested using cherry-pick for this situation too, so take your pick on whatever one makes the most sense to you!\ngit checkout name-of-the-correct-branch # grab the last commit to master git cherry-pick master # delete it from master git checkout master git reset HEAD~ --hard  I tried to run a diff but nothing happened?! git diff --staged  Git won\u0026rsquo;t do a diff of files that have been add-ed to your staging area without this flag. File under ¯_(ツ)_/¯ (yes, this is a feature, not a bug, but it\u0026rsquo;s baffling and non-obvious the first time it happens to you!)\nFuck this noise, I give up. cd .. sudo rm -r fucking-git-repo-dir git clone https://some.github.url/fucking-git-repo-dir.git cd fucking-git-repo-dir  "
},
{
	"uri": "https://ridingintraffic.github.io/docs/posts/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ridingintraffic.github.io/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/ansible/",
	"title": "ansible",
	"tags": [],
	"description": "ansible notes",
	"content": " ansible notes https://galaxy.ansible.com/ Galaxy is your hub for finding, reusing and sharing Ansible content\nhttps://github.com/wilmardo/ansible-role-plex repo for the plex install with ansible\u0026hellip; something for later\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/chef/",
	"title": "chef",
	"tags": [],
	"description": "chef notes",
	"content": " chef $ kitchen list $ kitchen converge ;# creates the vagrant box from the kitchen.yml $ kitchen exec -c whoami ;#fire a command from insid ethe vagrant box $ kitchen verify ;# runs the tests that are configured $ kitchen login ; # logs into the box directly gives a shell  "
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/cli/",
	"title": "cli",
	"tags": [],
	"description": "terminal stuff",
	"content": " shasum Getting a shasum on something\u0026hellip; useful so lets do it with this\nshasum -a 256 \u0026lt;filename\u0026gt;\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/k8s/",
	"title": "kubernetes",
	"tags": [],
	"description": "kubernetes",
	"content": " https://github.com/kubernetes/dashboard\nansible roles for minikube https://github.com/reachlin/k8s0\ncommands minikube kubectl  "
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/qmk/",
	"title": "qmk",
	"tags": [],
	"description": "qmk notes",
	"content": " qmk there is a bunch of qmk stuff out there this is what you need for qmk and the ergodox ez keyboard…\nhttps://docs.qmk.fm/ - qmk documentation\nhttps://www.pjrc.com/teensy/loader_linux.html \n***if you are programming it with the qmk toolbox make sure that your have karabiner elements turned off\ndocker images qmk builder can be done via docker. This means that it is way easier to build than dealing with all the dependencies for building, just use docker.\n docker run -e keymap=default_modded -e keyboard=ergodox_ez --rm -v $('pwd'):/qmk:rw edasque/qmk_firmware docker run -e keymap=ridingintraffic -e keyboard=ergodox_ez --rm -v $('pwd'):/qmk:rw edasque/qmk_firmware docker run -e keymap=ridingintraffic -e keyboard=planck/rev4 --rm -v $('pwd'):/qmk:rw edasque/qmk_firmware  location for qmk build and install https://github.com/qmk/qmk_toolbox/releases\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/ssh/",
	"title": "ssh",
	"tags": [],
	"description": "ssh notes",
	"content": " ssh SSH Proxy\nssh -o ProxyCommand='ssh -W %h:%p user@bastion' user@target  ~/.ssh/config\nHost bastion Hostname my-bastion-host.example.com Host my_server Hostname 10.0.1.18 ProxyCommand ssh bastion -W %h:%p  then you can use: $ ssh my_server\n"
},
{
	"uri": "https://ridingintraffic.github.io/docs/docs/tmux/",
	"title": "tmux",
	"tags": [],
	"description": "tmux notes",
	"content": " vim scrolling Ctrl-b [ then you can use your normal navigation keys to scroll around (eg. Up Arrow or PgDn). Press q to quit scroll mode.\nSelection and copying once in acroll mode spacebar character slect mode\nonce in scroll mode shift+V line select mode\nonce selected y copies to clipboard\npaste like normal\n"
}]